apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: create-quaye-pull-secret
  namespace: {{ .Values.quay.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  create-quaye-pull-secret.sh: |
      #!/bin/bash -ex
      env | grep QUAY
      if [ -z "$QUAY_HOST" ]; then
          QUAY_HOST="https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}"
      fi
      if [ -z "$QUAY_USER" ]; then
          QUAY_USER={{ .Values.quay.setup.user.name }}
      fi
      if [ -z "$QUAY_USER_EMAIL" ]; then
          QUAY_USER_EMAIL={{ .Values.quay.setup.user.email }}
      fi
      if [ -z "$QUAY_ORG" ]; then
          QUAY_ORG={{ .Values.quay.setup.org.name }}
      fi
      if [ -z "$QUAY_ORG_EMAIL" ]; then
          QUAY_ORG_EMAIL={{ .Values.quay.setup.org.email }}
      fi
      if [ -z "$QUAY_REPO" ]; then
          QUAY_REPO={{ .Values.quay.setup.repo }}
      fi

      #  '-n quay-enterprise' is implied
      echo "[INFO] Looking for initial token ..."
      COUNT=$(oc get --ignore-not-found=true secret quay-init-token | wc -l) 
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating default user..."
          # Invoke API and add quay user to the API - initiates API
          # TODO: Password should come from a Vault (via a Secret)!!
          JSONTOKEN=$(curl -X POST -k  $QUAY_HOST/api/v1/user/initialize --header 'Content-Type: application/json' --data "{ \"username\": \"{{ .Values.quay.setup.admin.name }}\", \"password\":\"{{ .Values.quay.setup.admin.password }}\", \"email\": \"{{ .Values.quay.setup.admin.email }}\", \"access_token\": true}")

          oc create secret generic quay-init-token --from-literal=token=$JSONTOKEN
          echo "quay-init-token created"
      fi
      
      TOKEN=$(oc extract secret/quay-temp-token --keys=token --to=- | grep access_token | cut -d : -f2 | awk -F\" '{print $2}')
      CURL_OPTS="--fail -k"

      # Now extract the token and store in the Quay Integration secret in openshift-operators namespace
      # oc create secret -n openshift-operators generic quay-integration --from-literal=token=$TOKEN
      
      echo "[INFO] Looking for initial organization ..."
      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/$QUAY_ORG | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
        echo "[INFO] Creating..."
        # Email cannot be shared with the initial user?  
        curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/ --data "{\"name\": \"$QUAY_ORG\", \"email\": \"$QUAY_ORG_EMAIL\" }"
      fi

      echo "[INFO] Looking for org application ..."
      # The only way to get another OAuth token is to go to: Organization -> Applications -> {app} -> Generate Token 
      APPLICATION=automation
      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/$QUAY_ORG/applications | grep $APPLICATION | wc -l)
      if [ $COUNT = 0 ]; then
        echo "[INFO] Creating..."
        curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/$QUAY_ORG/applications --data "{\"name\": \"$QUAY_ORG-automation\", \"description\": \"automation app\" }"
      fi
      
      echo "[INFO] Looking for initial repo ..."
      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/repository/$QUAY_ORG/$QUAY_REPO | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating..."
          curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/repository --data "{\"namespace\":\"$QUAY_ORG\", \"repository\":\"$QUAY_REPO\", \"visibility\":\"public\", \"description\":\"Development Repo\", \"repo_kind\":\"image\"}"
      fi

      echo "[INFO] Looking for our superuser ..."
      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/superuser/users/ | grep $QUAY_USER | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating..."
          USERTOKEN=$(curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/superuser/users/ --data "{ \"username\": \"$QUAY_USER\", \"email\": \"$QUAY_USER_EMAIL\", \"access_token\": true}")
          QUAY_PASSWORD=$(echo $USERTOKEN | cut -d : -f5 | awk -F\} '{print $1}')

          echo "[INFO] Creating a secret with user/password ..."
          oc create secret -n quay-enterprise generic quay-user --from-literal=token="$USERTOKEN"

          BASE64AUTH=`echo $QUAY_USER:$QUAY_PASSWORD | base64 -w0`
          echo -e "{ \"auths\": { \"$QUAY_HOST\": { \"auth\": \"$BASE64AUTH\" } }}" | oc create secret generic --namespace=openshift-operators quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson
      fi

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/$QUAY_ORG/team/owners/members | grep "name\": \"$QUAY_USER\"" | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Associating $QUAY_USER with $QUAY_ORG"
          curl -X PUT $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/organization/$QUAY_ORG/team/owners/members/$QUAY_USER --data '{}'
      fi

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER | grep '"role": "admin"' | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Give $QUAY_USER admin rights to the repo"
          curl -X PUT $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAY_HOST/api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER --data '{ "role": "admin"}'
      fi

      echo "[INFO] Job finished"
