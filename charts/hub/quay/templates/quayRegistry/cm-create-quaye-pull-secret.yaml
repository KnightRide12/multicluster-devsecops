apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: create-quaye-pull-secret
  namespace: {{ .Values.quay.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  create-quaye-pull-secret.sh: |
    #!/bin/bash
    echo "[INFO] QUAYORG: $QUAYORG QUAYUSER: $QUAYUSER"
    oc get secret quay-temp-token
    if [ $? -ne 0 ]; then
      echo "[INFO] Quay default user not created. Creating ..."  
      # Invoke API and add quay user to the API - initiates API
      JSONTOKEN=$(curl -X POST -k  https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/user/initialize --header 'Content-Type: application/json' --data '{ "username": "{{ .Values.global.quay.account }}", "password":"{{ .Values.global.quay.password }}", "email": "$QUAYEMAIL", "access_token": true}')
      echo "[INFO] TOKEN: $JSONTOKEN"
      oc create secret generic quay-temp-token --from-literal=token=$JSONTOKEN
    fi
    echo "quay-temp-token created"
    echo "[INFO] Secret quay-integration not created. Creating ..."  
    # Now extract the token and store in the Quay Integration secret in openshift-operators namespace
    TOKEN=$(oc extract secret/quay-temp-token --keys=token --to=- | grep access_token | cut -d : -f2 | awk -F\" '{print $2}') && \
    if [ $? -eq 0 ]; then
      echo "[INFO] TOKEN: $TOKEN"
    else
      echo "[ERROR] Trouble extracting TOKEN from quay-temp-token"
      exit 2
    fi
    echo "[INFO] Create organization $QUAYORG"
    curl -X POST -k --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/organization/ --data '{"name": "{{ .Values.devel.quayorg }}", "email": "{{ .Values.devel.quayorgemail }}" }'
    echo "[INFO] Org creation status: $?"
    if [ $? -eq 0 ]; then
      echo "[INFO] Creating a repo ..."
      curl -X POST -k --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/repository --data '{"namespace": "{{ .Values.devel.quayorg }}","repository": "{{ .Values.devel.quayorg }}","visibility":"public","description":"Development Repo","repo_kind":"image"}'
      if [ $? -eq 0 ]; then
        echo "[INFO] Repo created"
      else 
        echo "[ERROR] Could not creat repo"
        exit 2
      fi
      echo "[INFO] Creating a user ..."
      USERTOKEN=$(curl -X POST -k  https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/superuser/users/ -H "Authorization: Bearer $TOKEN" --header 'Content-Type: application/json' --data '{ "username": "{{ .Values.devel.quayuser }}", "email": "{{ .Values.devel.quayuseremail }}", "access_token": true}')
      echo $USERTOKEN
      if [ $? -eq 0 ]; then
        echo "[INFO] User created"
      else 
        echo "[ERROR] Could not create User"
        exit 2
      fi
      QUAYPASSWORD=$(echo $USERTOKEN | cut -d : -f5 | awk -F\} '{print $1}')
      echo "[INFO] Creating a secret with user/password ..."
      oc create secret -n quay-enterprise generic quay-user --from-literal=token="$USERTOKEN"
      if [ $? -eq 0 ]; then
        echo "[INFO] User secret created"
      else 
        echo "[ERROR] Could not create secret quay-user."
        exit 2
      fi
      echo "[INFO] Associating $QUAYUSER with $QUAYORG"
      OUTPUT=$(curl -X PUT -k  https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/organization/$QUAYORG/team/owners/members/$QUAYUSER -H "Authorization: Bearer $TOKEN" --header 'Content-Type: application/json' --data '{}')
      if [ $? -eq 0 ]; then
        echo "[INFO] Output: $OUTPUT"
      else 
        echo "[ERROR] Could not associate user $QUAYUSER with org. $QUAYORG"
        exit 2
      fi
      echo "[INFO] Give $QUAYUSER admin rights to the repo"
      OUTPUT=$(curl -X PUT -k  https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}/api/v1/repository/$QUAYORG/$QUAYORG/permissions/user/$QUAYUSER -H "Authorization: Bearer $TOKEN" --header 'Content-Type: application/json' --data '{ "role": "admin"}')
      if [ $? -eq 0 ]; then
        echo "[INFO] Output: $OUTPUT"
      else 
        echo "[ERROR] Could not $QUAYUSER admin rights"
        exit 2
      fi
      BASE64AUTH=`echo $QUAYUSER:$QUAYPASSWORD | base64`
      echo "[INFO] BASE64AUTH=$BASE64AUTH"
      echo -e "\"https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}\":{\n"\
      "\"auth\": \"$BASE64AUTH\",\n"\
      "\"email\": \"{{ .Values.global.quay.email }}\"\n}" | oc create secret generic quay-pull-secret --type=kubernetes.io/dockerconfigjson
    else
        echo "[ERROR] Problem with creating an organization in Quay Enterprise!"
        exit 2  
    fi
    echo "[INFO] Job finished"