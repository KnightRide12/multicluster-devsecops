apiVersion: v1
kind: ConfigMap
metadata:
  # quaye abbrev. for Quay Enterprise
  name: create-quaye-pull-secret
  namespace: {{ .Values.quay.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
data:
  create-quaye-pull-secret.sh: |
      #!/bin/bash -ex
      echo "[INFO] QUAYORG: $QUAYORG QUAYUSER: $QUAYUSER"
      if [ -z "$QUAYHOST" ]; then
          QUAYHOST=https://quay-registry-quay-quay-enterprise.{{ .Values.global.hubClusterDomain }}
      fi
      if [ -z "$QUAYUSER" ]; then
          QUAYUSER=admin
      fi
      if [ -z "$QUAYEMAIL" ]; then
          QUAYEMAIL=devel@your.com
      fi
      if [ -z "$QUAYORG" ]; then
          QUAYORG=devel
      fi
      if [ -z "$QUAYREPO" ]; then
          QUAYREPO=$QUAYORG
      fi

      #  '-n quay-enterprise' is implied
      COUNT=$(oc get --ignore-not-found=true secret quay-temp-token | wc -l) 
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating Quay default user..."
          # Invoke API and add quay user to the API - initiates API
          # TODO: Password should come from a Vault (via a Secret)!!
          JSONTOKEN=$(curl -X POST -k  $QUAYHOST/api/v1/user/initialize --header 'Content-Type: application/json' --data "{ \"username\": \"quayinit\", \"password\":\"{{ .Values.global.quay.password }}\", \"email\": \"$QUAYEMAIL\", \"access_token\": true}")

          oc create secret generic quay-temp-token --from-literal=token=$JSONTOKEN
          echo "quay-temp-token created"
      fi
      
      TOKEN=$(oc extract secret/quay-temp-token --keys=token --to=- | grep access_token | cut -d : -f2 | awk -F\" '{print $2}')
      CURL_OPTS="--fail -k"

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/organization/$QUAYORG | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
        # Now extract the token and store in the Quay Integration secret in openshift-operators namespace
        # oc create secret -n openshift-operators generic quay-integration --from-literal=token=$TOKEN
        echo "[INFO] Create organization $QUAYORG"
        # Email cannot be shared with the initial user?  
        curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/organization/ --data "{\"name\": \"$QUAYORG\", \"email\": \"org+$QUAYEMAIL\" }"
      fi

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/repository/$QUAYORG/$QUAYREPO | grep -v not_found | wc -l)
      if [ $COUNT = 0 ]; then
            echo "[INFO] Creating a repo ..."
            curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/repository --data "{\"namespace\":\"$QUAYORG\", \"repository\":\"$QUAYREPO\", \"visibility\":\"public\", \"description\":\"Development Repo\", \"repo_kind\":\"image\"}"
      fi

      COUNT=$(curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/superuser/users/ | grep $QUAYUSER | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Creating a superuser ..."
          USERTOKEN=$(curl -X POST $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/superuser/users/ --data "{ \"username\": \"$QUAYUSER\", \"email\": \"$QUAYEMAIL\", \"access_token\": true}")
          QUAYPASSWORD=$(echo $USERTOKEN | cut -d : -f5 | awk -F\} '{print $1}')

          echo "[INFO] Creating a secret with user/password ..."
          oc create secret -n quay-enterprise generic quay-user --from-literal=token="$USERTOKEN"

          BASE64AUTH=`echo $QUAYUSER:$QUAYPASSWORD | base64 -w0`
          echo -e "{  \"auths\": {    \"$QUAYHOST\": {    \"auth\": \"$BASE64AUTH\"    }  }}" | oc create secret generic --namespace=openshift-operators quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson
      fi

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/organization/$QUAYORG/team/owners/members | grep "name\": \"$QUAYUSER\"" | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Associating $QUAYUSER with $QUAYORG"
          curl -X PUT $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/organization/$QUAYORG/team/owners/members/$QUAYUSER --data '{}'
      fi

      COUNT=$(curl -X GET $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/repository/$QUAYORG/$QUAYREPO/permissions/user/$QUAYUSER | grep '"role": "admin"' | wc -l)
      if [ $COUNT = 0 ]; then
          echo "[INFO] Give $QUAYUSER admin rights to the repo"
          curl -X PUT $CURL_OPTS --header 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" $QUAYHOST/api/v1/repository/$QUAYORG/$QUAYREPO/permissions/user/$QUAYUSER --data '{ "role": "admin"}'
      fi

      echo "[INFO] Job finished"
