---
# Source: pipelines/templates/app-pipeline/rbac/registry-credential-sa.yaml
apiVersion: v1
kind: ServiceAccount
imagePullSecrets:
- name: registry-credential
metadata:
  name: pipeline-svc
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
secrets:
  - name: quay-api-token
  - name: acs-api-token
---
# Source: pipelines/templates/chains/tekton-chains-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: chains-config
  namespace: openshift-pipelines
data:
  artifacts.oci.storage: ''
  artifacts.taskrun.format: tekton
  artifacts.taskrun.storage: tekton
---
# Source: pipelines/templates/environment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment
data:
  DESCRIPTION: "Config keys for openshift-pipelines"
---
# Source: pipelines/templates/app-pipeline/pvcs/containers-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: containers-pvc
  namespace: devsecops-ci
spec:
  resources:
    requests:
      storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
#  persistentVolumeReclaimPolicy: Retain
---
# Source: pipelines/templates/app-pipeline/pvcs/pipeline-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pipeline-pvc
  namespace: devsecops-ci
spec:
  resources:
    requests:
      storage: 2Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
#  persistentVolumeReclaimPolicy: Retain
---
# Source: pipelines/templates/app-pipeline/rbac/imagestream-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: imagestream-view
rules:
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreams
  verbs:
  - get
- apiGroups:
  - image.openshift.io
  resources:
  - imagestreamimports
  verbs:
  - create
---
# Source: pipelines/templates/app-pipeline/build-and-deploy.yaml
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  params:
    - name: github-repo-revision
      type: string
      description: Git branch
      default: main
    - name: github-repo-url
      type: string
      description: Github repo
      default: https://github.com/ipbabble/chat-client.git
    - name: context-dir
      type: string
    - name: image-name
      type: string
    - name: is-name
      type: string
      default: chat-client
  workspaces:
    - name: source
  tasks:
  - name: clone-sources
    taskRef:
      name: git-clone
      kind: ClusterTask
    params:
      - name: url
        value: '$(params.github-repo-url)'
      - name: revision
        value: '$(params.github-repo-revision)'
      - name: deleteExisting
        value: 'true'
    workspaces:
      - name: output
        workspace: source
  - name: build-from-source
    taskRef:
      name: react-build
    runAfter:
    - clone-sources
    workspaces:
      - name: output
        workspace: source
  - name: build-image
    taskRef: 
      name: buildah-with-vols
    params:
      - name: IMAGE
        value: '$(params.image-name)'
      - name: CONTEXT
        value: '.'
      - name: TLSVERIFY
        value: 'false'
    workspaces:
      - name: source
        workspace: source
    runAfter: 
      - build-from-source
  - name: rollout-latest-image
    taskRef: 
      name: openshift-client
      kind: ClusterTask
    params:
      - name: ARGS
        value:
          - import-image
          - $(params.is-name):latest
    runAfter:
      - build-image
---
# Source: pipelines/templates/app-pipeline/pipeline-run-with-scan.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: react-scan-pipelinerun
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: https://github.com/ipbabble/chat-client.git
    - name: "context-dir"
      value: "/"
    - name: "image-name"
      value: quay.io/ipbabble/chat-client:latest
    - name: "is-name"
      value: "chat-client"
    - name: "acs-image"
      value: quay.io/ipbabble/chat-client:latest
    - name: "acs-scan-api"
      value: "https://central-stackrox.hub.example.com"
  pipelineRef:
    name: build-scan-and-deploy
  podTemplate:
      securityContext:
        runAsUser: 0
        fsGroup: 0
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline-svc
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/pipeline-run-with-sign.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: cosign-pipelinerun
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: https://github.com/ipbabble/chat-client.git
    - name: "context-dir"
      value: "/"
    - name: "image-name"
      value: quay.io/ipbabble/chat-client:latest
    - name: "is-name"
      value: "chat-client"
  pipelineRef:
    name: build-and-sign
  podTemplate:
      securityContext:
        runAsUser: 0
        fsGroup: 0
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline-svc
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/pipeline-run.yaml
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: react-pipelinerun
spec:
  params: 
    - name: "github-repo-revision"
      value: "main"
    - name: "github-repo-url"
      value: https://github.com/ipbabble/chat-client.git
    - name: "context-dir"
      value: "/"
    - name: "image-name" 
      value: quay.io/ipbabble/chat-client:latest
    - name: "is-name"
      value: "chat-client"
  pipelineRef:
    name: build-and-deploy
  podTemplate:
      securityContext:
        runAsUser: 0
        fsGroup: 0
      volumes:
        - name: varlibcontainers
          persistentVolumeClaim:
            claimName: containers-pvc
  serviceAccountName: pipeline-svc
  workspaces:
    - name: source
      persistentVolumeClaim:
        claimName: pipeline-pvc
---
# Source: pipelines/templates/app-pipeline/buildah-to-registry.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: buildah-to-registry
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: image-build
spec:
  description: >-
    Buildah task builds source into a container image and
    then pushes it to a container registry.
    Buildah Task builds source into a container image using Buildah 
    build tool. It uses Buildah's support for building from Dockerfiles,
    using its buildah bud command.This command executes the directives in the
    Dockerfile to assemble a container image, then pushes that image to a
    container registry.
  params:
  - name: IMAGE
    description: Reference of the image buildah will produce.
  - name: BUILDER_IMAGE
    description: The location of the buildah builder image.
    default: quay.io/buildah/stable:v1.17.0
  - name: STORAGE_DRIVER
    description: Set buildah storage driver
    default: overlay
  - name: DOCKERFILE
    description: Path to the Dockerfile to build.
    default: ./Dockerfile
  - name: CONTEXT
    description: Path to the directory to use as context.
    default: .
  - name: TLSVERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: FORMAT
    description: The format of the built container, oci or docker
    default: "oci"
  - name: BUILD_EXTRA_ARGS
    description: Extra parameters passed for the build command when building images.
    default: ""
  - name: PUSH_EXTRA_ARGS
    description: Extra parameters passed for the push command when pushing images.
    type: string
    default: ""
  workspaces:
  - name: source

  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.
  - name: IMAGE_URL
    description: Name of the image just built.

  steps:
  - name: build
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) bud \
        $(params.BUILD_EXTRA_ARGS) --format=$(params.FORMAT) \
        --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t $(params.IMAGE) $(params.CONTEXT)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true

  - name: push
    image: $(params.BUILDER_IMAGE)
    workingDir: $(workspaces.source.path)
    script: |
      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.source.path)/image-digest $(params.IMAGE) \
        docker://$(params.IMAGE)
    volumeMounts:
    - name: varlibcontainers
      mountPath: /var/lib/containers
    securityContext:
      privileged: true

  - name: digest-to-results
    image: $(params.BUILDER_IMAGE)
    script: cat $(workspaces.source.path)/image-digest | tee /tekton/results/IMAGE_DIGEST

  - name: name-to-results
    image: $(params.BUILDER_IMAGE)
    script: echo $(params.IMAGE) | tee /tekton/results/IMAGE_URL
---
# Source: pipelines/templates/app-pipeline/install-without-buildah.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: react-build
spec:
  workspaces:
    - name: output
  params:
    - name: TLSVERIFY
      type: string
      default: 'true'
    - name: IMAGE
      type: string
      default: 'quay.io/ipbabble/chat-client:latest'
    - name: DOCKERFILE
      type: string
      default: ./Dockerfile
    - name: CONTEXT
      type: string
      default: .
  steps:
  - name: install
    # ipbabble TBD change
    image: quay.io/ipbabble/ubi-npm:latest
    command:
    - /usr/bin/npm
    args:
    - install
    workingDir: $(workspaces.output.path)
  - name: build
    # ipbabble TBD change
    image: quay.io/smileyfritz/ubi-npm:latest
    command:
    - /usr/bin/npm
    args:
    - run-script
    - build
    workingDir: $(workspaces.output.path)
---
# Source: pipelines/templates/app-pipeline/scan-image.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: scan-image-acs
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: scan-image
spec:
  description: >-
    Uses the Red Hat Advanced Cluster Security APIs to scan 
    a container image against the current build policies for the cluster.
  params:
  - name: IMAGE
    description: Reference of the image to scan
  - name: SCAN_IMAGE
    description: Image containing the roxctl CLI
    default: quay.io/smileyfritz/roxctl:latest
  - name: TLS_VERIFY
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
    default: "true"
  - name: ACS_CENTRAL
    description: The end-point for the ACS API

  steps:
  - name: scan
    image: $(params.SCAN_IMAGE)
    env:
      - name: ROX_API_TOKEN
        valueFrom:
          secretKeyRef:
            name: acs-api-token
            key: token
    script: |
      /usr/bin/roxctl --insecure-skip-tls-verify=$(params.TLS_VERIFY) -e $(params.ACS_CENTRAL):443 image check --image=$(params.IMAGE)
---
# Source: pipelines/templates/chains/tekton-chain.yaml
apiVersion: operator.tekton.dev/v1alpha1
kind: TektonChain
metadata:
  name: chain
spec:
  targetNamespace: openshift-pipelines
